function [ppie]=D2RC_Interpolation(u_star,v_star,rho,mu,p,psi,phi,mcapXP,mcapXE,mcapXf,mcapYP,mcapYN,mcapYf,ppie)
global  imax imin jmax jmin dt nx ny dxi dyi dx dy RhieChow_or_Not gy gx epsilon 
global sigmafX sigmafY
% 中心差分计算通量+RhioChow修正
%%
%==================系数矩阵：▽·（1/ρ*▽P'）===========
ppie=zeros(imax+3,jmax+3);
[L] = D2Matrix_Laplace(rho);
%==================密度基系数
Rhox_f=2 ./ ( 1./rho(imin-1:imax , jmin:jmax) + 1./rho(imin:imax+1 , jmin:jmax) );
ax.W= -Rhox_f ./ rho(imin-1:imax , jmin:jmax);
ax.P= -Rhox_f ./ rho(imin:imax+1 , jmin:jmax) +4;
ax.E=  Rhox_f ./ rho(imin-1:imax , jmin:jmax) -4;
ax.EE= Rhox_f ./ rho(imin:imax+1 , jmin:jmax);

Rhoy_f=2 ./ ( 1./rho(imin:imax , jmin-1:jmax) + 1./rho(imin:imax , jmin:jmax+1) );
ay.S= -Rhoy_f ./ rho(imin:imax , jmin-1:jmax);
ay.P= -Rhoy_f ./ rho(imin:imax , jmin:jmax+1) +4;
ay.N=  Rhoy_f ./ rho(imin:imax , jmin-1:jmax) -4;
ay.NN= Rhoy_f ./ rho(imin:imax , jmin:jmax+1);
%=================其他自导系数
cx_f=3/2*Rhox_f/dt; 
cy_f=3/2*Rhoy_f/dt;  

%aP aE n+1)*(n+1
RCaP= 0.5*(dy/dx)*(circshift(mu,1,1)+ 2*mu + circshift(mu,-1,1))...
      +0.5*(dx/dy)*(circshift(mu,1,2)+ 2*mu + circshift(mu,-1,2));%统一计算，分别调用
RCaP_apx=RCaP(imin-1:imax ,jmin:jmax  );
RCaP_aex=RCaP(imin :imax+1,jmin:jmax  );
RCaP_apy=RCaP(imin :imax  ,jmin-1:jmax);
RCaP_any=RCaP(imin :imax  ,jmin:jmax+1);
%==========df
dx_f= 0.5*(dx*dy)*(1./RCaP_apx + 1./RCaP_aex);
dy_f= 0.5*(dx*dy)*(1./RCaP_apy + 1./RCaP_any);
%=========df cap
dx_fCap= dx_f./(1+ cx_f .* dx_f);
dy_fCap= dy_f./(1+ cy_f .* dy_f);
%============外力修正 G
Force_Gx_Correction= dx_fCap.*(gx*Rhox_f ...
    - gx*(Rhox_f/2).* (rho(imin-1:imax , jmin:jmax)./rho(imin-1:imax , jmin:jmax)....
    +rho(imin:imax+1 , jmin:jmax)./rho(imin:imax+1 , jmin:jmax)));
Force_Gy_Correction= dy_fCap.*(gy*Rhoy_f ...
    - gy*(Rhoy_f/2).* (rho(imin:imax , jmin-1:jmax)./rho(imin:imax , jmin-1:jmax)....
    +rho(imin:imax , jmin:jmax+1)./rho(imin:imax , jmin:jmax+1)));
%============外力修正 Fs
CofFsX=6*sqrt(2)*sigmafX/epsilon;CofFsY=6*sqrt(2)*sigmafY/epsilon;
[PsiX,PsiY] = D2Matrix_FaceMeanF(psi) ;
GradxPhi=D2Gradx_Matrix(phi);GradyPhi=D2Grady_Matrix(phi);
% Fs_x_Correction= CofFsX.*dx_fCap ...
%                 .* ( PsiX .*(phi(imin:imax+1,jmin:jmax)-phi(imin-1:imax,jmin:jmax))/dx  ...
%                   -0.5*Rhox_f.*(psi(imin-1:imax,jmin:jmax) .* GradxPhi(imin-1:imax,jmin:jmax) ./ rho(imin-1:imax , jmin:jmax)...
%                                +psi(imin:imax+1,jmin:jmax) .* GradxPhi(imin:imax+1,jmin:jmax) ./ rho(imin:imax+1 , jmin:jmax) )) ;
% Fs_y_Correction= CofFsY.*dy_fCap ...
%                 .* ( PsiY .*(phi(imin:imax,jmin:jmax+1)-phi(imin:imax,jmin-1:jmax))/dy  ...
%                   -0.5*Rhoy_f.*(psi(imin:imax,jmin-1:jmax) .* GradyPhi(imin:imax,jmin-1:jmax) ./ rho(imin:imax , jmin-1:jmax)...
%                                +psi(imin:imax,jmin:jmax+1) .* GradyPhi(imin:imax,jmin:jmax+1) ./ rho(imin:imax , jmin:jmax+1) )) ;
%=========Fs修正，=ψδφ
Fs_x_CorrectionH= dx_fCap ...
                .* ( PsiX .*(phi(imin:imax+1,jmin:jmax)-phi(imin-1:imax,jmin:jmax))/dx  ...
                  -0.5*Rhox_f.*(psi(imin-1:imax,jmin:jmax) .* GradxPhi(imin-1:imax,jmin:jmax) ./ rho(imin-1:imax , jmin:jmax)...
                               +psi(imin:imax+1,jmin:jmax) .* GradxPhi(imin:imax+1,jmin:jmax) ./ rho(imin:imax+1 , jmin:jmax) )) ;
Fs_y_CorrectionH= dy_fCap ...
                .* ( PsiY .*(phi(imin:imax,jmin:jmax+1)-phi(imin:imax,jmin-1:jmax))/dy  ...
                  -0.5*Rhoy_f.*(psi(imin:imax,jmin-1:jmax) .* GradyPhi(imin:imax,jmin-1:jmax) ./ rho(imin:imax , jmin-1:jmax)...
                               +psi(imin:imax,jmin:jmax+1) .* GradyPhi(imin:imax,jmin:jmax+1) ./ rho(imin:imax , jmin:jmax+1) )) ;

                           
%===========瞬态项补充
% mcapXP,mcapXE,mcapXf,mcapYP,mcapYE,mcapYf
mcapX_correction= (0.5*dx_fCap/dt) .* (2*mcapXf-mcapXE-mcapXP)  ;
mcapY_correction= (0.5*dy_fCap/dt) .* (2*mcapYf-mcapYN-mcapYP)   ;


%%
[FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
[~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;

%===================b向量  ： (1.5/dt)*▽·U*===========
switch RhieChow_or_Not
    case 1  % 无RC修正
%         [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
%         [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        adv_Ustar= dxi*( FaceUX(2:end,:)-FaceUX(1:end-1,:))...
            +dyi*(FaceVY(:,2:end)-FaceVY(:,1:end-1))  ;
    case 2  %  以dt为系数进行RC修正，但仅能计算密度比1:1
%         [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
        FaceUX_Correct=  0.25*dt/dx...
            * (-1*p(imin-1-1:imax-1 , jmin:jmax)...
            +3*p(imin-1  :imax+1-1 , jmin:jmax)...
            -3*p(imin+1-1:imax+2-1   , jmin:jmax)...
            +1*p(imin+2-1:imax+3-1 , jmin:jmax));
        FaceUX_RC2=FaceUX+FaceUX_Correct;
        
        
%         [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  0.25*dt/dy...
            * (-1*p(imin:imax ,jmin-1-1:jmax-1)...
            +3*p(imin:imax ,jmin-1  :jmax+1-1)...
            -3*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +1*p(imin:imax ,jmin+2-1:jmax+3-1));
        FaceVY_RC2=FaceVY+FaceVY_Correct; 
        
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
        
    case 3  %WENO
        [FLuxUx, ~,~]=D2Matrix_FluxX(u_star);
        [FLuxVy, ~,~]=D2Matrix_FluxY(v_star);
        adv_Ustar=dxi*FLuxUx + dyi*FLuxVy;
        
    case 4 % RhieChow based Density
        [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
        FaceUX_Correct=  0.25*dt/dx...
            * (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
            +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
            +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
            +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));
        FaceUX_RC2=FaceUX+FaceUX_Correct;
        
        
        [~,FaceVY] =D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  0.25*dt/dy...
            * (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));
        FaceVY_RC2=FaceVY+FaceVY_Correct;       
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
    case 5 %自导:只将系数dt替换为dcap
        [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
        FaceUX_Correct=  (0.25/dx*dx_fCap)...
            .* (-1*p(imin-1-1:imax-1 , jmin:jmax)...
            +3*p(imin-1  :imax+1-1 , jmin:jmax)...
            -3*p(imin+1-1:imax+2-1   , jmin:jmax)...
            +1*p(imin+2-1:imax+3-1 , jmin:jmax));
        FaceUX_RC2=FaceUX+FaceUX_Correct;
        
        
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (-1*p(imin:imax ,jmin-1-1:jmax-1)...
            +3*p(imin:imax ,jmin-1  :jmax+1-1)...
            -3*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +1*p(imin:imax ,jmin+2-1:jmax+3-1));
        FaceVY_RC2=FaceVY+FaceVY_Correct;       
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
    case 6 %自导dcap + 密度基修正δP
        [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
        FaceUX_Correct=  (0.25/dx*dx_fCap)...
            .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
            +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
            +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
            +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));
        FaceUX_RC2=FaceUX+FaceUX_Correct;
        
        
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));
        FaceVY_RC2=FaceVY+FaceVY_Correct;       
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
      case 7 %自导dcap + 密度基修正δP + 重力修正
          [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
          FaceUX_Correct=  (0.25/dx*dx_fCap)...
              .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
              +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
              +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
              +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));          

          FaceUX_RC2=FaceUX+FaceUX_Correct+Force_Gx_Correction;
          
        
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));
        FaceVY_RC2=FaceVY+FaceVY_Correct+ Force_Gy_Correction;
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
     case 8 %自导dcap + 密度基修正δP + 表面张力修正
          [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
          FaceUX_Correct=  (0.25/dx*dx_fCap)...
              .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
              +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
              +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
              +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));                    
          FaceUX_RC2=FaceUX+FaceUX_Correct+Fs_x_Correction;
                 
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));        
        FaceVY_RC2=FaceVY+FaceVY_Correct+ Fs_y_Correction;
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
   case 9 %自导dcap + 密度基修正δP + 重力修正 + 表面张力修正
          [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
          FaceUX_Correct=  (0.25/dx*dx_fCap)...
              .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
              +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
              +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
              +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));                    
          FaceUX_RC2=FaceUX+FaceUX_Correct+Force_Gx_Correction+Fs_x_Correction;
                 
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));        
        FaceVY_RC2=FaceVY+FaceVY_Correct+Force_Gy_Correction+Fs_y_Correction;
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
    case 10 %自导dcap + 密度基修正δP + 重力修正 + 表面张力修正 +瞬态项修正( 密度比：Wrong)
          [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
          FaceUX_Correct=  (0.25/dx*dx_fCap)...
              .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
              +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
              +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
              +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));                    
          FaceUX_RC2=FaceUX+FaceUX_Correct+Force_Gx_Correction+Fs_x_Correction+mcapX_correction;
                 
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));        
        FaceVY_RC2=FaceVY+FaceVY_Correct+Force_Gy_Correction+Fs_y_Correction+mcapY_correction;
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;       
   case 11 %自导dcap + 密度基修正δP + 重力修正 + 表面张力修正(fs=ψ▽φ型)
          [FaceUX,~] = D2Matrix_FaceMeanF(u_star) ;
          FaceUX_Correct=  (0.25/dx*dx_fCap)...
              .* (ax.W .*p(imin-1-1:imax-1 , jmin:jmax)...
              +ax.P .*p(imin-1  :imax+1-1 , jmin:jmax)...
              +ax.E .*p(imin+1-1:imax+2-1   , jmin:jmax)...
              +ax.EE .*p(imin+2-1:imax+3-1 , jmin:jmax));                    
          FaceUX_RC2=FaceUX+FaceUX_Correct+Force_Gx_Correction+Fs_x_CorrectionH;
                 
        [~,FaceVY] = D2Matrix_FaceMeanF(v_star) ;
        FaceVY_Correct=  (0.25/dy*dy_fCap)...
            .* (ay.S .*p(imin:imax ,jmin-1-1:jmax-1)...
            +ay.P .*p(imin:imax ,jmin-1  :jmax+1-1)...
            +ay.N .*p(imin:imax ,jmin+1-1:jmax+2-1  )...
            +ay.NN .*p(imin:imax ,jmin+2-1:jmax+3-1));        
        FaceVY_RC2=FaceVY+FaceVY_Correct+Force_Gy_Correction+Fs_y_CorrectionH;
        adv_Ustar= dxi*( FaceUX_RC2(2:end,:)-FaceUX_RC2(1:end-1,:))...
            +dyi*(FaceVY_RC2(:,2:end)-FaceVY_RC2(:,1:end-1))  ;
end

Bp1=1.5/dt * adv_Ustar; b_poison=reshape(Bp1,nx*ny,1);
%%
%===================Directly Solve==============================
pv=sparse(L)\sparse(b_poison);   % Poison 方程非正定，不能使用共轭梯度法
ppie(imin : imax , jmin : jmax)=reshape(pv,nx,ny); %将解得的P填入网格

end

%1
% Lp = ichol(L);  %所有迭代法都产生错误的解，并且主元为负也不能直接预处理
% [pv,~]= cgs(L,b_poison); %Wrong Solution
% [pv,~]= pcg(L,b_poison); %Wrong Solution
% [pv,~]=pcg(L,b_poison,1e-8,300);
%2 多重网格-高斯赛德尔迭代
% addpath 'C:\Users\wangxs\Downloads\Poisson_FDM_Multigrid-master\Poisson_FDM_Multigrid-master'
% pv=Multigrid_Solver(L,b_poison,1);%,@GS_Iter,1,1,1e-6);
% ppie(imin : imax , jmin : jmax)=reshape(pv,nx,ny); %将解得的P填入网格